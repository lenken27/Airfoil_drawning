# -*- coding: utf-8 -*-
"""
Created on Sat Apr 13 10:57:56 2019

@author: Emre
"""
import math
import numpy as np
import matplotlib.pyplot as plt
ascii
import os
import glob

                                    #Part A
# =============================================================================
def normalize(x,y,name):
        """
        The Coordinates are fitting in definited interval
        especially in x coordinates start from 1 to 0 then from 0 to 1.
        
        arg: two arrays of x and y.
        
        return: normalized x and y values
        """
        x=airfoil[:,0]/x[0]
        y=airfoil[:,1]/x[0]
        # make the zero of the x coordinates
        if len(x)%2==0:
            x[int((len(x))/2)-1]=0   #for dual total number of points
        elif len(x)%2!=0:   
            x[int((len(x))/2)]=0   #for single total number of points 
        xnew=np.asarray([x,y])
        xnew=np.transpose(xnew)
        np.savetxt('C:/Users/Toshıba/Desktop/figures/datas/'+name[:-2]+'.txt',xnew)
        return x, y
# =============================================================================
 
                                    #Part B  
# =============================================================================
def plot_airfoil(x,y,name,status):
        """
        plotting airfoil surfaces and adjusting the boundarys
        
        arg: two arrays of x and y and name of the airfoil 
        and status is the define the cusped or pointed
        
        return : None
        """
        
        plt.figure(figsize= (8,6))
        plt.ylim(ymax=.5)
        plt.ylim(ymin=-.5)
        # Name and Kutto conditoin type had wroten togetter on the up side.
        title=(str(name)+str(status))
        plt.title(title, fontsize=15)                                 
        plt.plot(x,y,'--')
        plt.xlabel("X Coordinates",fontsize=15)
        plt.ylabel("Y Coordinates",fontsize=15)
        plt.axes().set_aspect(1,'datalim')
# =============================================================================
    
# =============================================================================
def plot_meancamberline(x,y):
        """
        plotting mean camber line that is middle line between upper an lower lines.
        
        arg: two arrays of x and y.
        
        return : None
        """    
        mcly=[]
        mclx=[]
        # ran is the limit of the loop.     
        ran=(len(y)-1)/2
        for i in range(int(ran)):
            mcly.append((y[i]+y[-i-1])/2)
            mclx.append((x[i]+x[-i-1])/2)
        
        mcly.append(0)
        mclx.append(0)    
        plt.plot(mclx,mcly,'r-')
        plt.axes().set_aspect(1,'datalim')
# =============================================================================

# =============================================================================
def plot_chordline(x,y):
        """
        plotting the chord line that is line between fist and last x points.
        
        arg: two arrays of x and y.
        
        return : None
        """     
        clx=[]    
        cly=[]
        ran=(len(y)-1)/2    
        cly.append(y[0])
        clx.append(x[0])
        cly.append(y[int(ran)])
        clx.append(x[int(ran)])
        
        plt.plot(clx,cly,'g-')
        # That is neccessary for the set the aspect ratios of the figure.
        plt.axes().set_aspect(1,'datalim')
# =============================================================================

# =============================================================================
def max_thickness(x,y):
        """
        plotting the maximum thickness 
        the max distance between upper and lower surfaces.
    
        arg: two arrays of x and y.
        
        return : maximum thickness length.
        """     
        mt=0
        t=0
        ran=(len(y)-1)/2
        for i in range(int(ran)):
            t=(y[i]-y[-i-1])
        # in the following loop evaluate the maximum thickness for every loop
        # if the previous is bigger than other stay same.
            if t >= mt:
                mt=t
                location=i
        
        mtx=[]
        mty=[]
        mty.append(y[location])
        mtx.append(x[location])
        mty.append(y[-location-1])
        mtx.append(x[-location-1])
        plt.text(0.55,0.35,"Maximum Thickness location: "+str(mt)+"c")
        plt.plot(mtx,mty,'b-')
        plt.axes().set_aspect(1,'datalim')
        return mt
# =============================================================================


                                    ##Part C 
# =============================================================================
def plot_panels(x,y,N):
        """
        plotting the panels normal with aid of the circle attibutes. 
    
        arg: two arrays of x,y and number of the panel number With N.
        
        return : None.
        """                                    
        N=N+2                                                                     
        R = (x.max() - x.min()) / 2  # radius of the circle
        x_center = (x.max() + x.min()) / 2  # x-coord of the center
        # define x-coord of the circle points
        x_circle = x_center + R * np.cos(np.linspace(0.0, 2 * math.pi, N +1)) 
        x_ends = np.copy(x_circle)  # projection of the x-coord on the surface
        y_ends = np.empty_like(x_ends)  # initialization of the y-coord Numpy array
           
        #x, y = np.append(x, x[0]), np.append(y, y[0])  # extend arrays using numpy.append 
        
        I = 0
        for i in range(N):
            while I < len(x) :
                if (x[I] <= x_ends[i] <= x[I + 1]) or (x[I + 1] <= x_ends[i] <= x[I]):
                    break
                else:
                    I += 1
            a = (y[I + 1] - y[I]) / (x[I + 1] - x[I]) # a is the slope 
            b = y[I + 1] - a * x[I + 1]   # b is evaluating with aid of the a.
            y_ends[i] = a * x_ends[i] + b
        y_ends[N] = y_ends[0]
    
        tx=x_ends[1:]-x_ends[:-1]
        ty=y_ends[1:]-y_ends[:-1]  
        nx=ty
        ny=-tx
        n_ = (nx**2+ny**2)**.5
        nx=nx/n_
        ny=ny/n_
        
        #Create list from the array for using pop command.
        x_ends=list(x_ends) 
        y_ends=list(y_ends)
        nx=list(nx)
        ny=list(ny)
        #Remove the first and end point for does not create normal.
        x_ends.pop()
        y_ends.pop()
        y_ends.pop(0)
        x_ends.pop(0)
        x_ends.pop(int(N/2)-1)
        y_ends.pop(int(N/2)-1)
        nx.pop(int(N/2)-1)
        ny.pop(int(N/2)-1)
        
        plt.quiver(x_ends,y_ends,nx,ny)
        return                               
# =============================================================================


# =============================================================================
def is_cusped(x,y):
        """
        Evaluating the is this airfoil Cusped or Pointed
    
        arg: two arrays of x and y.
        
        return : type of the trailing edge with string type.
        """ 
        # Exceed of the limit it is becoming pointed edge.
        limit = np.deg2rad(15)                                
        upper_slope = (y[0]-y[1])/(x[0]-x[1])                                   
        lower_slope = (y[-1]-y[-2])/(x[-1]-x[-2]) 
        
        # theta is the angle between upper and lower trailing edge surfaces.
        theta =np.arctan(upper_slope)-np.arctan(lower_slope)  
        
        if abs(theta) <= limit:
            status=('(Cusped)')
        else:
            status=('(Pointed)')
        return status
# =============================================================================

# =============================================================================    

airfoil='naca1408.dat'
name=open(airfoil,"r")
name=name.readline()

airfoil = np.loadtxt(airfoil, skiprows=1)
x,y=airfoil[:,0],airfoil[:,1]

if 1==1:   
    N=20
    # get the normalized coordinates as x and y.
    x,y=normalize(x,y,name)
    # get cusped or pointed with string type.
    status=is_cusped(x,y)
    # plot the airfoil using x, y coordinates
    plot_airfoil(x,y,name,status)
    # plot the chord line                                 
    plot_chordline(x,y)                                 
    # plot the mean camberline                              
    plot_meancamberline(x,y)  
    # calculate and show max thickness of the airfoil
    mt=max_thickness(x,y)
    plt.savefig('C:/Users/Toshıba/Desktop/figures/without panel/'+ name[:-2] +'.png')
    plot_panels(x,y,N) 
if 2==2:
    N=20
    # get the normalized coordinates as x and y.
    x,y=normalize(x,y,name)
    # get cusped or pointed with string type.
    status=is_cusped(x,y)
    # plot the airfoil using x, y coordinates
    plot_airfoil(x,y,name,status)
    # plot the chord line                                 
    plot_chordline(x,y)                                 
    # plot the mean camberline                              
    plot_meancamberline(x,y)  
    # calculate and show max thickness of the airfoil
    mt=max_thickness(x,y)    
    plot_panels(x,y,N)    
    plt.savefig('C:/Users/Toshıba/Desktop/figures/with panel/'+ name[:-2] +'.png')
                      
# =============================================================================                                    

